function App(): JSX.Element {
  const [data, setData] = useState<Record[] | null>(null);
  const [error, setError] = useState<Error | null>(null);
  const [isLoaded, setIsLoaded] = useState<boolean>(false);
  const api = useFetch();

  const url = "http://localhost:5000/records";

  const renderCondition = {err: error, load: !isLoaded};

  const getRenderMessage = (condition: {err: Error | null; load: boolean}) => {
    const message = condition.err ? `${error?.message}` : `Loading`;
    return message;
  };

  useEffect(() => {
    const getData = () => {
      api
        .get(url)
        .then((res: Record[]) => {
          setData(res);
          setIsLoaded(true);
        })
        .catch((err: Error) => {
          setError(err);
          setIsLoaded(true);
        });
    };
    getData();
  }, []);

  const removeRow = useCallback(
    (record: Record) => {
      const filterRecords = (records: Record[] | null, record: Record): Record[] | null => {
        if (!records) {
          return null;
        }

        const filteredRecords = records.filter((r) => r !== record);
        if (filteredRecords.length === 0) {
          return null;
        }
        return filteredRecords.map((r) => {
          if (r.kids) {
            const filteredKids = Object.entries(r.kids).reduce<Kids>(
              (acc, [key, {records: kidsRecords}]) => {
                const filteredRecords = filterRecords(kidsRecords, record);
                if (filteredRecords) {
                  acc[key] = {records: filteredRecords};
                }
                return acc;
              },
              {}
            );
            const filteredKidsEntries = Object.entries(filteredKids).filter(
              ([key, {records}]) => records !== null
            );
            const hasKids = filteredKidsEntries.length > 0;
            console.log("entries", r, Object.fromEntries(filteredKidsEntries));

            return {
              ...r,
              kids: hasKids ? Object.fromEntries(filteredKidsEntries) : null,
            };
          }
          return r;
        });
      };

      const filteredData = filterRecords(data, record);
      console.log("filteredData", filteredData);
      setData(filteredData ?? []);
    },
    [data]
  );
	$Petras 
 

  return renderCondition.err || renderCondition.load ? (
    <div>{getRenderMessage(renderCondition)}</div>
  ) : (
    <div className="App">
      <Table data={data} removeRow={removeRow} />
    </div>
  );
}
